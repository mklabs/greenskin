#parse("report/velocity/macros/util.macros.vm")
## Setting up the data needed in the site.summary.xml.vm
#set($nrOfPages = $document.getRootElement().getChildren("results").size())

## Get the total objects

#set($nrOfDecimals = 0)

## Creating all statistics objects
#set($statsJs = $stats.newInstance("jsPerPage","Number of Javascript files per page","Few larger files are better when using HTTP 1.1. For HTTP 2.0 it is better with many small files from few domains.","","",1))
#set($statsCss = $stats.newInstance("cssPerPage","Number of CSS files per page","Few larger files are better when using HTTP 1.1. For HTTP 2.0 it is better with many small files from few domains.","","",1))
#set($statsImages = $stats.newInstance("imagesPerPage","Number of images per page","Avoid too many images because it will take time for them all to load.","","",1))
#set($statsCssImages = $stats.newInstance("cssImagesPerPage","Number of CSS images per page","Few larger CSS images are better when using HTTP 1.1. For HTTP 2.0 it is better with many small files from few domains.","","",1))
#set($statsRequests = $stats.newInstance("requests","Number of requests per page","Fewer requests are always faster than many requests.","","",1))
#set($statsPageWeight = $stats.newInstance("pageWeight","Total page weight (including all assets)","The total size is really important because of slow mobile networks, keep the size small.","weight","kb",1))
#set($statsImageWeight = $stats.newInstance("imageWeight","Image weight","The weight of images is important, because of mobile and slow networks, keep the size to a minimal.","weight","kb",1))
#set($statsJsWeight = $stats.newInstance("jsWeight","JS weight","The weight of javascripts is important, because of mobile and networks, keep the size to a minimal.","weight","kb",1))
#set($statsCssWeight = $stats.newInstance("cssWeight","CSS weight","The weight of CSS  is important, because of mobile and networks, keep the size to a minimal.","weight","kb",1))
#set($statsTotalImageWeight = $stats.newInstance("imageWeightPerPage","Total images weight per page","Image weight are the largest part of a web page. Make sure they are compressed and as small as possible.","weight","kb",1))
#set($statsTotalCssWeight = $stats.newInstance("cssWeightPerPage","CSS file weight per page","Don't download large front-end framework CSS files when you only use small parts of it.","weight","kb",1))
#set($statsTotalJsWeight = $stats.newInstance("jsWeightPerPage","JS file weight per page","Don't download large Javascript libraries when you only use small parts of it. ","weight","kb",1))
#set($statsScore = $stats.newInstance("ruleScore","Rule score","The sitespeed.io total rule score for all the pages.","","",1))
#set($statsDocumentWeight = $stats.newInstance("docWeight","Document weight","Keep the document at a reasonable size, it will make it possible for the browser to generate the page faster. ","weight","kb",1))
#set($statsSpof = $stats.newInstance("spofPerPage","Number of SPOF per page","A Single Point Of Failure is a asset that is loaded (usually) from another domain before the page starts rendering, meaning if the asset isn't loaded, the page will be broken/slow.","","",1))
#set($statsSpofPages = $stats.newInstance("spofPages","Pages with SPOF","How many pages have a single point of failures (meaning if someone elses API/site is broken, it will break your page.","","",1))
#set($statsScaledImages = $stats.newInstance("browserScaledImages","Images scaled by the browser","Never scale images in the browser, that will slow down the rendering.","","",1))
#set($statsJsSyncInHead = $stats.newInstance("jsSyncInHead","Number of JS synchronously in head","Loading Javascript synchronously inside of the HEAD tag will slow down your page rendering. Just don't do it!","","",1))
#set($statsAssetsWithoutExpires = $stats.newInstance("requestsWithoutExpires","Requests without expires","Requests shall always have expire headers, so that they can be cached by the browser.","","",1))
#set($statsCriticalPath = $stats.newInstance("criticalPathScore","Critical Rendering Path Score","Do as little as possible within the HEAD tag so that the browser can start rendering a page as soon as possible (avoid DNS lookups and load CSS/JS files).","","",1))
#set($statsTextContent = $stats.newInstance("textContent","Amount of text content","Comparing code (HTML/JS/CSS) versus plain text. ","","%",1))
#set($statsTimeSinceLastModificationInSeconds = $stats.newInstance("timeSinceLastModification","Time since last modification","The time since a file was changed the last time. If it was long ago, please make sure the cache time is high!","cachetime","",1))
#set($statsAssetCacheTimeInSeconds = $stats.newInstance("assetsCacheTime","Cache time","How long time the assets are cached in the browser. Long time is good.","cachetime","",1))
#set($statsDomElements = $stats.newInstance("domElements","Number of DOM elements","Too many DOM elements means that the page is complex and will be slower to render.","","",1))
#set($statsDomains = $stats.newInstance("domainsPerPage","Number of domains","Many domains means many DNS lookups and that means slower pages.","","",1))
#set($statsCompressed = $stats.newInstance("requestsWithoutGZipPerPage","Requests without GZip","All text content (JS/CSS/HTML) can and should be sent GZiped so that the size is as small as possible.","","",1))

## And add them to the list of statistics
#set($hide = $allStats.add($statsScore))
#set($hide = $allStats.add($statsCriticalPath))
#set($hide = $allStats.add($statsJsSyncInHead))
#set($hide = $allStats.add($statsJs))
#set($hide = $allStats.add($statsCss))
#set($hide = $allStats.add($statsImages))
#set($hide = $allStats.add($statsCssImages))
#set($hide = $allStats.add($statsRequests))
#set($hide = $allStats.add($statsImageWeight))
#set($hide = $allStats.add($statsJsWeight))
#set($hide = $allStats.add($statsCssWeight))
#set($hide = $allStats.add($statsTotalImageWeight))
#set($hide = $allStats.add($statsTotalCssWeight))
#set($hide = $allStats.add($statsTotalJsWeight))
#set($hide = $allStats.add($statsPageWeight))
#set($hide = $allStats.add($statsDocumentWeight))
#set($hide = $allStats.add($statsDomElements))
#set($hide = $allStats.add($statsSpof))
#set($hide = $allStats.add($statsSpofPages))
#set($hide = $allStats.add($statsAssetsWithoutExpires))
#set($hide = $allStats.add($statsTextContent))
#set($hide = $allStats.add($statsTimeSinceLastModificationInSeconds))
#set($hide = $allStats.add($statsAssetCacheTimeInSeconds))
#set($hide = $allStats.add($statsDomains))
#set($hide = $allStats.add($statsScaledImages))
#set($hide = $allStats.add($statsCompressed))

## Fetch all statistics used by the boxes
#foreach ($results in $document.getRootElement().getChildren())

    #if($!{results.getChild("stats").getChild("js").getChild("r")})
        $statsJs.addValue($math.toInteger($results.getChild("stats").getChild("js").getChild("r").getValue()))
    #end

    #if($!{results.getChild("stats").getChild("css").getChild("r")})
        $statsCss.addValue($math.toInteger($results.getChild("stats").getChild("css").getChild("r").getValue()))
    #end

    #if($!{results.getChild("stats").getChild("cssimage").getChild("r")})
        $statsCssImages.addValue($math.toInteger($results.getChild("stats").getChild("cssimage").getChild("r").getValue()))
    #end

    #if($!{results.getChild("stats").getChild("image").getChild("r")})
        $statsImages.addValue($math.toInteger($results.getChild("stats").getChild("image").getChild("r").getValue()))
    #end

    #if($!{results.getChild("r")})
         $statsRequests.addValue($math.toInteger($results.getChild("r").getValue()))
    #end

    #if($!{results.getChild("w")})
        ## sometimes the page weight is wrongly calculated by YSlow, so lets do it manually
        #set($totalWeight = 0)
        #foreach ($asset in $results.getChild("comps").getChildren())
            #set($totalWeight = $math.add($totalWeight,$asset.getChild("size").getValue()))
        #end
        #set($totalWeight = $math.roundTo(1,$math.div($totalWeight,1000)))
        $statsPageWeight.addValue($totalWeight)
    #end

    #if($!{results.getChild("o")})
        $statsScore.addValue($math.toInteger($results.getChild("o").getValue()))
    #end

    #if($!{results.getChild("stats").getChild("doc").getChild("w")})

        $statsDocumentWeight.addValue($math.toDouble($math.roundTo(3,$math.div($results.getAttribute("size").getValue(),1000))))
    #end


    #if($!{results.getChild("g").getChild("mindom").getChild("score")})
           $statsDomElements.addValue($math.toInteger($results.getChild("g").getChild("mindom").getChild("components").getChildText("item")))
    #end

    #if($!{results.getChild("g").getChild("spof").getChild("score")})
	   #if ($results.getChild("g").getChild("spof").getChild("score").getValue() != 100)
	       $statsSpofPages.addValue(1)
           $statsSpof.addValue($math.toInteger($results.getChild("g").getChild("spof").getChild("components").getChildren("item").size()))
       #else
        $statsSpof.addValue(0)
       #end
    #end

    #if($!{results.getChild("g").getChild("ycompress").getChild("score")})
       #if ($results.getChild("g").getChild("ycompress").getChild("score").getValue() != 100)
           $statsCompressed.addValue($math.toInteger($results.getChild("g").getChild("ycompress").getChild("components").getChildren("item").size()))
       #else
        $statsCompressed.addValue(0)
       #end
    #end


    #if($!{results.getChild("g").getChild("criticalpath").getChild("score")})
           $statsCriticalPath.addValue($math.toInteger($results.getChild("g").getChild("criticalpath").getChild("score").getValue()))
    #end

    #if($!{results.getChild("g").getChild("textcontent").getChild("score")})
           $statsTextContent.addValue($math.toDouble($results.getChild("g").getChild("textcontent").getChild("components").getChildText("item")))
    #end

    #if($!{results.getChild("g").getChild("syncjsinhead").getChild("components")})
     $statsJsSyncInHead.addValue($math.toInteger($results.getChild("g").getChild("syncjsinhead").getChild("components").getChildren("item").size()))
    #end

    #if($!{results.getChild("g").getChild("avoidscalingimages").getChild("components")})
     $statsScaledImages.addValue($math.toInteger($results.getChild("g").getChild("avoidscalingimages").getChild("components").getChildren("item").size()))
    #end


    #if($!{results.getChild("g").getChild("expiresmod").getChild("components")})
     $statsAssetsWithoutExpires.addValue($math.toInteger($results.getChild("g").getChild("expiresmod").getChild("components").getChildren("item").size()))
    #end

    #set ($totalImagePageSize = 0)
    #set ($totalCssPageSize = 0)
    #set ($totalJsPageSize = 0)

	## also fetch the modified since & cache time
    #set($hosts = [])

	#foreach ($asset in $results.getChild("comps").getChildren())

		## set default values
		#set ($lastMod = "")
		#set ($date = "")
		#set ($cacheControl = 0)
		#set ($expires = "")

		## fetch the real ones
		#set ($lastMod = $asset.getChild("headers").getChild("response").getChild("Last-Modified").getValue())
		#set ($date = $asset.getChild("headers").getChild("response").getChild("Date").getValue())
		#set ($cacheControl = $asset.getChild("headers").getChild("response").getChild("Cache-Control").getValue())
		#set ($expires = $asset.getChild("headers").getChild("response").getChild("Expires").getValue())

		#set ($delta = $header.getDelta($lastMod,$date))
		#if ($delta=="" || ! $delta)
			## unknown skip it for now
		#else
		    $statsTimeSinceLastModificationInSeconds.addValue($delta.getSeconds())
		#end

		#set ($cacheTime = $header.getCacheTime($cacheControl, $expires, $date))
		#if ($cacheTime=="" || !$cacheTime)
		     	$statsAssetCacheTimeInSeconds.addValue(0)
		#else
		     	$statsAssetCacheTimeInSeconds.addValue($cacheTime.getSeconds())
		#end

        #if (($asset.getChild("type").getValue() == "image") || ($asset.getChild("type").getValue() == "cssimage"))
           $statsImageWeight.addValue($math.toDouble($math.roundTo(3,$math.div($asset.getChild("size").getValue(),1000))))
           #set($totalImagePageSize = $math.add($totalImagePageSize,$math.toDouble($math.roundTo(3,$math.div($asset.getChild("size").getValue(),1000)))))
        #elseif ($asset.getChild("type").getValue() == "css")
           $statsCssWeight.addValue($math.toDouble($math.roundTo(3,$math.div($asset.getChild("size").getValue(),1000))))
           #set($totalCssPageSize = $math.add($totalCssPageSize,$math.toDouble($math.roundTo(3,$math.div($asset.getChild("size").getValue(),1000)))))
        #elseif ($asset.getChild("type").getValue() == "js")
             $statsJsWeight.addValue($math.toDouble($math.roundTo(3,$math.div($asset.getChild("size").getValue(),1000))))
             #set($totalJsPageSize = $math.add($totalJsPageSize,$math.toDouble($math.roundTo(3,$math.div($asset.getChild("size").getValue(),1000)))))
        #end

        ## count the nr of domains
        #set($theHost = $host.getHost($asset.getChild("url").getValue()))
        #if (!$hosts.contains($theHost))
            #set($swallow = $hosts.add($theHost))
        #end

	#end

    #if($hosts.size()>0)
        $statsDomains.addValue($hosts.size())
    #end

    #if($totalImagePageSize>0)
        $statsTotalImageWeight.addValue($totalImagePageSize)
    #end
    #if($totalCssPageSize>0)
        $statsTotalCssWeight.addValue($totalCssPageSize)
    #end
    #if($totalJsPageSize>0)
        $statsTotalJsWeight.addValue($totalJsPageSize)
    #end

#end

## We create only these extra data if (and only if) we also run Browser Time to collect them

#set($isBrowserTime = $document.getRootElement().getChild("metrics"))
#if($isBrowserTime)


## Setup all descriptions
#set($nameAndDescription = $map.clone())

#set($hide = $nameAndDescription.put("firstPaintTime","This is when the first paint happens on the screen, reported by the browser."))
#set($hide = $nameAndDescription.put("serverConnectionTime","How long time it takes to connect to the server. Definition: connectEnd - connectStart"))
#set($hide = $nameAndDescription.put("domainLookupTime","The time it takes to do the DNS lookup. Definition: domainLookupEnd - domainLookupStart"))
#set($hide = $nameAndDescription.put("pageLoadTime","The time it takes for page to load, from initiation of the pageview (e.g., click on a page link) to load completion in the browser. Important: this is only relevant to some pages, depending on how you page is built. Definition: loadEventStart - navigationStart"))
#set($hide = $nameAndDescription.put("pageDownloadTime","How long time does it take to download the page (the HTML). Definition: responseEnd - responseStart"))
#set($hide = $nameAndDescription.put("serverResponseTime","How long time does it take until the server respond. Definition: responseStart - requestStart"))
#set($hide = $nameAndDescription.put("domContentLoadedTime","The time the browser takes to parse the document and execute deferred and parser-inserted scripts including the network time from the user's location to your server. Definition: domContentLoadedEventStart - navigationStart"))
#set($hide = $nameAndDescription.put("domInteractiveTime","The time the browser takes to parse the document, including the network time from the user's location to your server. Definition: domInteractive - navigationStart"))
#set($hide = $nameAndDescription.put("redirectionTime","Time spent on redirects. Definition: fetchStart - navigationStart"))
#set($hide = $nameAndDescription.put("backEndTime","The time it takes for the network and the server to generate and start sending the HTML. Definition: responseStart - navigationStart"))
#set($hide = $nameAndDescription.put("frontEndTime","The time it takes for the browser to parse and create the page. Definition: loadEventStart - responseEnd"))


#set($nameAndMesurementsStats = $map.clone())

## Foreach page & browser, add the data!
#foreach ($timingSession in $document.getRootElement().getChild("metrics").getChildren("timingSession"))

    #foreach ($pageData in $timingSession.getChild("pageData").getChildren())
        #if ($pageData.getChild("key").getValue()=="browserName")
            #set ($browser= $pageData.getChild("value").getValue())
        #end
    #end

  ## first setup all the statsobjects
    #foreach ($measurement in $timingSession.getChild("runs").getChild("run").getChild("measurements").getChildren("measurement"))
        #set ($name =$measurement.getAttributeValue("name"))
        #set( $browser = "#getBrowserName( $browser )" )
        #set ($descBrowser = "$name $browser")
        #set ($statsNameBrowser = "$name$browser")
        #set($statsMeasurement = $stats.newInstance($name,$name,$nameAndDescription.get($name),"","ms",1))
        #set($statsBrowserMeasurement = $stats.newInstance($statsNameBrowser,$descBrowser,$nameAndDescription.get($name),"","ms",1))
        #set($hide = $nameAndMesurementsStats.put($name, $statsMeasurement))
        #set($hide = $nameAndMesurementsStats.put($statsNameBrowser, $statsBrowserMeasurement))
    #end

    #end

    ## Collect the real data
    #foreach ($timingSession in $document.getRootElement().getChild("metrics").getChildren("timingSession"))

    #foreach ($pageData in $timingSession.getChild("pageData").getChildren())
        #if ($pageData.getChild("key").getValue()=="browserName")
            #set ($browser= $pageData.getChild("value").getValue())
            #set( $browser = "#getBrowserName( $browser )" )
        #end
    #end

    #foreach ($run in $timingSession.getChild("runs").getChildren("run"))
        #foreach ($measurement in $run.getChild("measurements").getChildren("measurement"))
            #set ($name =$measurement.getAttributeValue("name"))
            #set ($statsNameBrowser = "$name$browser")
            #set($stats= $nameAndMesurementsStats.get($name))
            $stats.addValue($math.toDouble($measurement.getAttributeValue("duration")))
            #set($statsBrowser= $nameAndMesurementsStats.get($statsNameBrowser))
            $statsBrowser.addValue($math.toDouble($measurement.getAttributeValue("duration")))
            ## Will only be added once since the equals ...
            #set($hide = $allStats.add($statsBrowser))
            #set($hide = $allStats.add($stats))
        #end
    #end
#end

#end


## Include a custom logic file, if you want to include your own code.
#if ($filetool.doFileExist("report/velocity/logic/custom/site.summary.xml.logic.vm"))
        #parse("report/velocity/logic/custom/site.summary.xml.logic.vm")
#end





