#!/usr/bin/env node

var debug  = require('../lib/debug')('sauce-browsertime');

var sbt  = require('..');
var fs   = require('fs');
var path = require('path');
var mkdirp = require('mkdirp');

var username = process.env.SAUCE_USERNAME;
var accesskey = process.env.SAUCE_ACCESS_KEY;
var webdriverHost = 'ondemand.saucelabs.com';
var webdriverPort = 80;

// Config

var options = {
  browser: String,
  platform: String,
  type: String,
  orientation: String,
  version: String,
  runs: Number,
  reporter: String,
  output: String,
  hostname: String,
  port: Number,
  'assert-help': Boolean,
  help: Boolean
};

var shorthands = {
  b: '--browser',
  p: '--platform',
  t: '--type',
  o: '--orientation',
  R: '--reporter',
  v: '--version',
  O: '--output',
  H: '--hostname',
  h: '--help',
  n: '--runs',
};

var nopt = require('nopt')(options, shorthands);
var help = require('../lib/nopt-help');
var url = nopt.argv.remain[0];

function assertHelp(verbose) {
  console.log();
  console.log('Asserts:');
  console.log();
  console.log('  --assert-name-stat=[value]   - Specify a test assertion on [name] metric');
  console.log('  --assert-name=value          - Specify a test assertion on [name] average value');
  console.log();
  if (!verbose) return;
  console.log();
  console.log('Metrics: \n\n  --assert-' + sbt.Intervals.keys('\n  --assert-', true));
  console.log();
  console.log('Available stats: min, max, avg, media, mad, p60, p70, p80, p90');
  console.log();
  console.log('Example:');
  console.log();
  console.log('sauce-browsertime http://example.com -n 3 --assert-pageLoadTime-max=2000 assert-backendTime-p90=250');
  console.log('');
}

if (nopt['assert-help']) return assertHelp(true);

if (nopt.help || !url) return help(options, shorthands, { program: 'sauce-browsertime' })
  .desc('browser', 'Saucelabs browser (default: chrome)')
  .desc('version', 'Saucelabs browser version (default: unspecified)')
  .desc('platform', 'Saucelabs platform (default: unspecified)')
  .desc('type', 'Saucelabs device type (default: unspecified)')
  .desc('orientation', 'Saucelabs device orientation (default: unspecified)')
  .desc('runs', 'Number of runs per URL (default: 1)')
  .desc('hostname', 'Webdriver-grid hostname (default: ' + webdriverHost + ')')
  .desc('reporter', 'Mocha reporter (default: json)')
  .desc('port', 'Specify webdriver-grid port (default: 80)')
  .desc('output', 'Writes JSON result to filepath (default: unspecified)')
  .desc('assert-help', 'Display all known assert types')
  .usage(function() {
    console.log('Usage: sauce-browsertime [options] [urls, ...]');
    console.log('');
    console.log('    $ sauce-browsertime http://example.com -b firefox -n 3 --assert-pageload-max=5000 --assert-frontend-p90=2500');
    console.log('');
    console.log('See https://saucelabs.com/platforms for the list of available OS / Browser / Version');
    console.log();
    process.nextTick(assertHelp);
  });

var webdriverHost = nopt.hostname || 'ondemand.saucelabs.com';
var webdriverPort = nopt.port || 80;

// Desired browser / platform

var desired = { browserName: nopt.browser || 'chrome' };
desired.name = 'Collecting Navigation Timings with ' + desired.browserName;
desired.tags = ['sauce-browsertime'];
if (nopt.platform) desired.platform = nopt.platform;
if (nopt.version) desired.version = nopt.version;
if (nopt.type) desired['device-type'] = nopt.type;
if (nopt.orientation) desired['device-orientation'] = nopt.orientation;
if (nopt.hostname) webdriverHost = nopt.hostname;
if (nopt.port) webdriverPort = nopt.port;

// checking sauce credential
if (!username || !accesskey) {
  console.warn(
    '\nPlease configure your sauce credential:\n\n' +
    'export SAUCE_USERNAME=<SAUCE_USERNAME>\n' +
    'export SAUCE_ACCESS_KEY=<SAUCE_ACCESS_KEY>\n\n'
  );

  throw new Error('Missing sauce credentials');
}

// Run
nopt.hostname = nopt.hostname || webdriverHost;
nopt.port = nopt.port || webdriverPort;
nopt.username = username;
nopt.accesskey = accesskey;
nopt.desired = desired;

sbt.run(nopt.argv.remain, nopt, function(err, results) {
  if (err) throw err;
  // post process here
  if (nopt.output) {
    debug('Writing results to %s file', nopt.output);
    mkdirp.sync(path.dirname(nopt.output));
    fs.writeFileSync(nopt.output, JSON.stringify(results, null, 2));
  }
});
