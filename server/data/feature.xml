<?xml version="1.0" encoding="UTF-8"?><project>
  <actions/>
  <description>Testing out phantomas metrics</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>20</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GRAPHITE_SERVER</name>
          <description>Remote graphite server to send data to</description>
          <defaultValue>192.168.33.33</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GRAPHITE_PORT</name>
          <description/>
          <defaultValue>8125</defaultValue>
        </hudson.model.StringParameterDefinition>

        <hudson.model.StringParameterDefinition>
          <name>JSON_CONFIG</name>
          <description>JSON config.</description>
          <defaultValue><![CDATA[{"steps":[{"name":"stepfile.js","body":"Then(/\"([^\"]+)\" metric should be less than \"([^\"]+)\"/, function(key, assert, done) {\n  if (!this.results) return done(new Error('Cannot access phantomas results. Be sure to run after phantomas.'));\n  \n  var metric = this.results.metrics[key];\n  if (!this.results) return done(new Error('Cannot find metric ' + key + '. Valid metrics are: ' + Object.keys(this.results)));\n  \n  var assertval = parseInt(assert, 10);\n  if (isNaN(assert)) return done(new Error(assert + ' is not a valid number'));\n   \n  console.log(metric);\n  var value = metric;\n  var val = parseInt(value, 10);\n  val = isNaN(val) ? value : val;\n    \n  done(val > assertval ? null : new Error(val + ' > ' + assertval + ' assert failed'));\n});\n\nThen(/I want to phantomize the page/, function(done) {\n  \n  \n  // compatibility layer for NodeJS modules\n  process.argv = [];\n  \n  Function.prototype.bind = null;\n  var Phantomas = require('phantomas/core/phantomas');\n  var formatter = require('phantomas/core/formatter');\n  \n  var task = phantomas = new Phantomas({\n    url: this.page.url,\n    // verbose: true,\n    'film-strip': true\n  });\n  \n  // phantomas.logger.log = console.log.bind(console);\n  \n  phantomas.log('Running');\n\n  try {\n      phantomas.run();\n  } catch(ex) {\n      console.log('phantomas v' + phantomas.version + ' failed with an error:');\n      console.log(ex);\n      return done(ex);\n  }\n  \n  var self = this;\n  phantomas.on('results', function(res) {\n    var json = formatter(res);\n    var data = JSON.parse(json);\n    self.results = data;\n    done();\n  });\n  \n  \n});\n\nThen(/I wait for \"([^\"]+)\" to be visible/, function(selector, done) {\n    \n  var jq = this.page.evaluate(function(selector) {\n    return typeof window.$ === 'function';\n  }, selector);\n\n  if (!jq) return done(new Error('This step relies on a jQuery like $ variable and was not accessible on ' + this.page.url));\n  \n  var ok = false;\n   \n  var to = setTimeout(function() {\n    done(new Error('Timeout error'));\n  }, 10000);\n  \n  var page = this.page;\n  (function next() {\n    if (ok) {\n      clearTimeout(to);\n      return done();\n    }\n    \n    setTimeout(function() {\n      ok = page.evaluate(function(selector) {\n        return $(selector).is(':visible');\n      }, selector);\n      \n      next();\n    }, 200);\n  })();\n});\n\n\nThen(/I wait for (\\d+)s/, function(delay, done) {\n  delay = parseInt(delay, 10);\n  if (isNaN(delay)) return done(new Error(delay + ' is not a number'));\n  setTimeout(done, delay * 1000);\n});\n\nGiven(/^I browse URL \"([^\"]+)\"$/, function(url, done) {\n    var page = this.page = require('webpage').create();\n    page.open(url, function(status) {\n        if (status !== 'success') return done(new Error(status));\n        done();\n    });\n});\n\nThen(/I want to render the page at \"([^\"]+)\"/, function(filename, done) {\n    this.page.render(filename);\n    done();\n});\n\nThen(/I click on \"([^\"]+)\"/, function(selector, done) {\n    var el = this.page.evaluate(function(selector) {\n        var qsa = window.$ || document.querySelectorAll.bind(document);\n    \tvar el = qsa(selector);\n        if (!el.length) return;\n      \tel.click();\n        return true;\n    }, selector);\n\n    if (!el) return done(new Error('Cannot get element ' + selector));\n    done();\n});\n\nThen(/I submit the form \"([^\"]+)\"/, function(selector, done) {\n  var self = this;\n  this.page.onUrlChanged = function(url) {\n    self.page.onUrlChanged = null;\n    console.log('url changed', url);\n    setTimeout(done, 1000);\n  };\n\n\n  var ok = this.page.evaluate(function(selector) {\n    var form = document.querySelector(selector);\n    if (!form) return false;\n    form.submit();\n    return true;\n  }, selector);\n\n  if (!ok) return done(new Error('Cannot get form ' + selector));\n});\n\nThen(/I fill \"([^\"]+)\" in \"([^\"]+)\"/, function(value, name, done) {\n    var ok = this.page.evaluate(function(value, name) {\n      console.log('Checking', value);\n      var el = document.querySelector('[name=\"' + name + '\"]');\n      if (!el) return;\n      el.value = value;\n      return true;\n    }, value, name);\n\n    if (!ok) return done(new Error('Cannot get input ' + name));\n\n    done();\n});\n\nThen(/I fill \"([^\"]+)\" in \"([^\"]+)\"/, function(value, name, done) {\n    var ok = this.page.evaluate(function(value, name) {\n      var el = document.querySelector('[name=\"' + name + '\"]');\n      if (!el) return;\n      el.value = value;\n      return true;\n    }, value, name);\n  \n    if (!ok) return done(new Error('Cannot get input ' + name));\n  \n    done();\n});\n\nThen(/I submit the form \"([^\"]+)\"/, function(selector, done) {\n  var self = this;\n  this.page.onUrlChanged = function(url) {\n    self.page.onUrlChanged = null;\n    console.log('url changed', url);\n    setTimeout(done, 1000);\n  };\n\n\n  var ok = this.page.evaluate(function(selector) {\n    var form = document.querySelector(selector);\n    if (!form) return false;\n    form.submit();\n    return true;\n  }, selector);\n\n  if (!ok) return done(new Error('Cannot get form ' + selector));\n});\n"}]}]]></defaultValue>
        </hudson.model.StringParameterDefinition>

        <hudson.model.StringParameterDefinition>
          <name>DEBUG</name>
          <description>Log debug option</description>
          <defaultValue>*</defaultValue>
        </hudson.model.StringParameterDefinition>

      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>R8_3</assignedNode>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>*/30 * * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>echo &quot;{}&quot; &gt; package.json
[ -e node_modules ] || npm install phantomjs gherkin mocha nopt phantomas</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>
[ -e phantomjs-nodify ] || git clone git://github.com/jgonera/phantomjs-nodify.git</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command><![CDATA[#!/usr/bin/env phantomjs

SCRIPT_BODY

// done

]]></command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>

  </publishers>
  <buildWrappers/>
</project>
