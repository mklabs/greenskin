<?xml version="1.0" encoding="UTF-8"?><project>
  <actions/>
  <description>Testing out phantomas metrics</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>20</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GRAPHITE_SERVER</name>
          <description>Remote graphite server to send data to</description>
          <defaultValue>192.168.33.33</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GRAPHITE_PORT</name>
          <description/>
          <defaultValue>8125</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PERF_URLS</name>
          <description>List of monitoring URLs. Whitespace separated.</description>
          <defaultValue>http://travel.kelkoo.co.uk http://voyages.kelkoo.fr</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>JSON_CONFIG</name>
          <description>Phantomas JSON config.</description>
          <defaultValue>{"no-externals":true,"allow-domain":".kk-data.com","asserts":{}}</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DEBUG</name>
          <description>Log debug option</description>
          <defaultValue>phantomas phantomas:progress</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>R8_3</assignedNode>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>*/30 * * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>echo &quot;{}&quot; &gt; package.json
[ -e node_modules ] || npm install phantomas debug async optimist tap-eater mkdirp rimraf</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command><![CDATA[#!/usr/bin/env node

var path = require('path');
var fs = require('fs');
var base = path.resolve('node_modules');

var phantomas = require(path.join(base, 'phantomas'));
var async = require(path.join(base, 'async'));
var debug = require(path.join(base, 'debug'))('phantomas:cli');
var mkdirp = require(path.join(base, 'mkdirp'));
var rimraf = require(path.join(base, 'rimraf'));

var options = {};
var runs;
var program = require(path.join(base, 'optimist'))('phantomas:cli');

// parse options
program
  .usage('PhantomJS-based web performance metrics collector\n\nphantomas <url> [options]')

  // mandatory
  .describe('url', 'Set URL to work with').string('url')

  // version / help
  .describe('version', 'Show version number and quit').boolean('version').alias('version', 'V')
  .describe('help', 'This help text').boolean('help').alias('help', 'h')

  // optional params
  .describe('allow-domain', 'allow requests to given domain(s) - aka whitelist [domain],[domain],...')
  .describe('block-domain', 'disallow requests to given domain(s) - aka blacklist [domain],[domain],...')
  .describe('config', 'uses JSON-formatted config file to set parameters')
  .describe('cookie', 'document.cookie formatted string for setting a single cookie (e.g. "bar=foo;domain=url")')
  .describe('cookies-file', 'specifies the file name to store the persistent Cookies')
  .describe('disable-js', 'disable JavaScript on the page that will be loaded').boolean('disable-js')
  .describe('ignore-ssl-errors', 'ignores SSL errors, such as expired or self-signed certificate errors')
  .describe('log', 'log to a given file')
  .describe('modules', 'run selected modules only [moduleOne],[moduleTwo],...')
  .describe('phone', 'force viewport and user agent of a mobile phone')
  .describe('no-externals', 'block requests to 3rd party domains').boolean('no-externals')
  .describe('post-load-delay', 'wait X seconds before generating a report')
  .describe('progress', 'shows page loading progress bar (disables verbose mode)').boolean('progress')
  .describe('proxy', 'specifies the proxy server to use (e.g. --proxy=192.168.1.42:8080)')
  .describe('proxy-auth', 'specifies the authentication information for the proxy (e.g. --proxy-auth=username:password)')
  .describe('proxy-type', 'specifies the type of the proxy server [http|socks5|none]')
  .describe('reporter', 'output format / reporter').default('reporter', 'statsd').alias('reporter', 'R').alias('reporter', 'format')
  .describe('runs', 'number of runs to perform')
  .describe('screenshot', 'render fully loaded page to a given file')
  .describe('har', 'save HAR to a given file')
  .describe('silent', 'don\'t write anything to the console').boolean('silent')
  .describe('skip-modules', 'skip selected modules [moduleOne],[moduleTwo],...')
  .describe('tablet', 'force viewport and user agent of a tablet')
  .describe('timeout', 'timeout for phantomas run').default('timeout', 15)
  .describe('user-agent', 'provide a custom user agent')
  .describe('verbose', 'writes debug messages to the console').boolean('verbose').alias('verbose', 'v')
  .describe('viewport', 'phantomJS viewport dimensions [width]x[height [default: 1280x1024]')
  .describe('wait-for-selector', 'wait for an element matching given CSS selector before generating a report')

  // experimental features
  .describe('analyze-css', 'emit in-depth CSS metrics - EXPERIMENTAL').boolean('analyze-css')
  .describe('film-strip', 'register film strip when page is loading - EXPERIMENTAL').boolean('film-strip')
  .describe('film-strip-dir', 'folder path to output film strip (default is ./filmstrip directory) - EXPERIMENTAL');

// parse it
options = program.parse(process.argv);
debug('Command line options: %j', options);

var config = JSON.parse(process.env.JSON_CONFIG);
fs.writeFileSync('config.json', JSON.stringify(config));

options.config = 'config.json';

options['statsd-host'] = process.env.GRAPHITE_SERVER || 'localhost';
options['statsd-port'] = process.env.GRAPHITE_PORT || 8125;
options['statsd-prefix'] = process.env.JOB_NAME + '.$url';

var urls = process.env.PERF_URLS.split(' ');

// perform a single run
function task(callback) {
  // spawn phantomas process
  var child = phantomas(url, options, function(err, data, results) {
    callback(err === 0 ? null : err, results);
  });

  // pipe --verbose messages to stderr
  child.stderr.pipe(process.stderr);
}

// Helper to cleanup URL for filesystem I/O or graphite keys
function cleanUrl(url) {
  return url
    .replace(/^https?:\/\//, '')
    .replace(/\/$/g, '')
    .replace(/(\/|\?|-|&|=|\.)/g, '_');
}

// @see https://github.com/caolan/async#seriestasks-callback
var series = [];

runs = parseInt(options.runs || 1, 10);
debug('Preparing %d run(s)...', runs);
debug('On %d URLs', urls.length, urls);

for (var r=0; r<runs; r++) {
  series.push(task);
}

var urlSeries = urls.map(function(url) {
  return function(callback) {
    // spawn phantomas process
    var opts = JSON.parse(JSON.stringify(options));

    var urlGraphite = cleanUrl(url);
    var buildId = process.env.BUILD_NUMBER;
    var dir = path.join('results', buildId, urlGraphite);
    var filmstripdir = path.join(dir, 'filmstrip');

    var prefix = opts['statsd-prefix'];
    prefix = prefix.replace(/\$url/, urlGraphite);
    opts['statsd-prefix'] = prefix + '.';

    opts.har = path.join(dir, 'har.json');
    opts['film-strip'] = true;
    opts['film-strip-dir'] = filmstripdir;

    var child = phantomas(url, opts, function(err, data, results) {
      if (err instanceof Error) return callback(err);

      var files = fs.readdirSync(filmstripdir);
      debug('Writing filmstrip list of files in %s: ', path.join(filmstripdir, 'files.json'), files);
      fs.writeFileSync(path.join(filmstripdir, 'files.json'), JSON.stringify(files));
      
      callback(null, results);
    });

    // pipe --verbose messages to stderr
    child.stderr.pipe(process.stderr);
  };
});

// Prepare metrics "db", replacing graphite for now
var metrics = fs.existsSync(path.resolve('./metrics.json')) ? require(path.resolve('./metrics.json')) : {};


// TODO: Handle multiple runs
async.series(
  urlSeries,
  function(err, results) {
    var debug = require(path.join(base, 'debug'))('phantomas:runs');

    debug('err: %j', err);
    debug('results: %j', results);
      
    // this function is called when phantomas is done with all runs
    function doneFn() {
      console.log('Testing metrics', metrics);
      fs.writeFileSync('./metrics.json', JSON.stringify(metrics, null, 2));

      // pass error code from PhantomJS process
      debug('Exiting with code #%d', err);
      process.exit(err);
    }

    // process JSON results by reporters
    debug('%d of %d run(s) completed with exit code #%d', results.length, runs, err);

    var reporter = require(path.join(base, 'phantomas/reporters/statsd'));
    var tap = require(path.join(base, 'phantomas/reporters/tap'));
    var json= require(path.join(base, 'phantomas/reporters/json'));

    debug('Initing latest results dir for tap files');
    var latestdir = path.join('results/latest');
    rimraf.sync(latestdir);
    mkdirp.sync(latestdir);

    debug('Calling reporters...');

    async.each(results, function(result, callback) {
      result = Array.isArray(result) ? result[1] : result;
      var resTap = tap(result, options).render(function() {});

      if (result === false) {
        throw new Error('Error with phantomjs invokation. Please double check config / urls.');
      }

      var url = result.getUrl();

      // Clean up the URL for Filesystem I/O
      url = cleanUrl(url);
      var dir = path.join('results', process.env.BUILD_NUMBER, url);

      debug('URL', result.getUrl(), url);
      debug(resTap);

      debug('Creating DIR', dir);
      mkdirp.sync(dir);

      var tapfile = path.join(dir, 'results.tap');

      debug('Writing TAP results to', tapfile);
      fs.writeFileSync(tapfile, resTap);

      debug('Writing TAP results to', path.join(latestdir, url + '.tap'));
      fs.writeFileSync(path.join(latestdir, url + '.tap'), resTap);

      debug('Writing JSON results to', path.join(latestdir, url + '.json'));
      var resJson = json(result, options).render();
      var data = JSON.parse(resJson);

      fs.writeFileSync(path.join(latestdir, url + '.json'), resJson);

      Object.keys(data.metrics).forEach(function(key) {
        var metric = metrics[key] || {};
        var series = metric.series = metric.series || [];
        var xaxis = metric.xaxis = metric.xaxis || [];

        if (!~xaxis.indexOf(process.env.BUILD_NUMBER)) {
          xaxis.push(process.env.BUILD_NUMBER);
        }

        var value = data.metrics[key];
        var serie = series.filter(function(s) {
          return s.name === url;
        })[0];

        if (!serie) {
          serie = { name: url, data: [] };
          series.push(serie);
        }

        serie.data.push(value);
  
        metric.xaxis = xaxis;
        metric.series = series;
        metrics[key] = metric;
      });

      reporter(result, options).render(callback);
    }, doneFn);
  }
);
]]></command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.tap4j.plugin.TapPublisher plugin="tap@1.18">
      <testResults>results/latest/*.tap</testResults>
      <failIfNoResults>false</failIfNoResults>
      <failedTestsMarkBuildAsFailure>false</failedTestsMarkBuildAsFailure>
      <outputTapToConsole>false</outputTapToConsole>
      <enableSubtests>false</enableSubtests>
      <discardOldReports>false</discardOldReports>
      <todoIsFailure>false</todoIsFailure>
      <includeCommentDiagnostics>false</includeCommentDiagnostics>
      <validateNumberOfTests>false</validateNumberOfTests>
      <planRequired>true</planRequired>
    </org.tap4j.plugin.TapPublisher>
  </publishers>
  <buildWrappers/>
</project>
