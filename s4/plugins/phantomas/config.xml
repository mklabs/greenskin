<?xml version="1.0" encoding="UTF-8"?><project>
  <actions/>
  <description>Testing out phantomas metrics</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>20</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>PERF_URLS</name>
          <description>List of monitoring URLs. Whitespace separated.</description>
          <defaultValue>http://www.kelkoo.fr http://www.kelkoo.it</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>JSON_CONFIG</name>
          <description>Phantomas JSON config.</description>
          <defaultValue><![CDATA[{"no-externals":false,"allow-domain":".kk-data.com","asserts":{"requests":55}}]]></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>jenkins-slave</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>*/30 * * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>echo "{}" &gt; package.json
[ -e node_modules ] || npm install phantomas glob hogan.js</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

URLS="$PERF_URLS"

RESULT_DIR="results/$BUILD_NUMBER"


echo """

URLs: $URLS

"""

node -e "var s = '$JSON_CONFIG'; if (s[0] === '\"' &amp;&amp; s[s.length - 1] === '\"') { s = s.slice(1, -1); } require('fs').writeFileSync('./config.json', s);"

cat config.json

for url in $URLS; do

  # Define URL key for I/O and Metric keys
  URL_KEY=$(node -pe "process.argv.slice(1)[0].replace(/(^https?:\/\/)|(\/$)/g, '').replace(/(\/|\?|-|&amp;|=|\.)/g, '_')" $url);
  URL_DIR=$RESULT_DIR/$URL_KEY

  echo """

  URL - $url
  Key - $URL_KEY
  Dir - $URL_DIR

  """

  mkdir -p $URL_DIR

  # echoing to user
  echo ./node_modules/.bin/phantomas $url \
    --reporter json \
    --modules=windowPerformance  \
    --config ./config.json \
    --screenshot $URL_DIR/screenshot.png \
    --har $URL_DIR/har.json \
    --film-strip --film-strip-dir $URL_DIR/filmstrip

  echo ""

  # actual run
  ./node_modules/.bin/phantomas $url \
    --reporter json \
    --modules=windowPerformance  \
    --config ./config.json \
    --screenshot $URL_DIR/screenshot.png \
    --har $URL_DIR/har.json \
    --film-strip --film-strip-dir $URL_DIR/filmstrip \
    &gt; $URL_DIR/build.json


  cat $URL_DIR/build.json
  echo ""

  cd $RESULT_DIR &amp;&amp; find -type f  &gt; files.txt
  cd $WORKSPACE
done

rm config.json

</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/env node

var env = process.env;

var fs = require('fs');
var path = require('path');
var exists = fs.existsSync;

var phantomas = requireWS('phantomas');
var phantomasResults = requireWS('phantomas/core/results');
var loadReporter = requireWS('phantomas/core/reporter');


var buildNumber = env.BUILD_NUMBER || env.TRAVIS_BUILD_NUMBER || 'last';
var dirname = path.resolve(env.WORKSPACE || '', 'results', buildNumber);

console.log('Result dir:', dirname);
var results = fs.readdirSync(dirname).map(function(dir) {
  if (fs.statSync(path.join(dirname, dir)).isFile()) return;
  console.log('Dealing with results %s dir', dir);
  var data = {};

  try {
    data = require(path.join(dirname, dir, 'build.json'));
  } catch(e) {
    console.error('Error loading build.json', dirname, dir);
    return;
  }


  data._asserts = data.asserts;
  data.asserts = data.asserts.rules;

  var results = phantomasResults(data);
  var reporter = loadReporter(results, {
    reporter: 'tap'
  });

  // pass a function that reporter should call once done
  var res = reporter.render(function() {});

  // Both in result dir
  var filename = path.resolve(dirname, dir, 'build.tap');
  console.log('Writing TAP results to %s file', filename);

  // And root workspace for tap publish
  filename = path.resolve(env.WORKSPACE || '', dir + '.tap');
  console.log('Writing TAP results to %s file', filename);
  fs.writeFileSync(filename, res);

  // Used by statsd-send to build the metric key
  data.prefix = dir;

  return data;
});

// All build info, to pass along downstream jobs
var filename = path.resolve(env.WORKSPACE || '', 'build.json');
console.log('Writing build JSON results to %s file', filename);
fs.writeFileSync(filename, JSON.stringify(results));


function requireWS(file) {
  return require(env.WORKSPACE ? path.join(env.WORKSPACE, 'node_modules', file) : file);
}</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/usr/bin/env node

// Script to generate metrics.json file for highcharts views

var fs    = require('fs');
var path  = require('path');
var glob  = requireWS('glob');
var path  = require('path');
var hogan = requireWS('hogan.js');

var read = fs.readFileSync;
var exists = fs.existsSync;

var args = process.argv.slice(2);
var metricFile = args[0] || 'metrics.json';

if (!exists('./build.json')) throw new Error('Missing build.json file. Please, run phantomas-format before');

var buildMetrics = require(path.resolve('./build.json')).filter(function(metrics) {
  // Filters out null data
  return metrics;
});

var metrics = exists(metricFile) ? require(path.resolve(metricFile)) : {};

var results = {};

// Build xaxis &amp; series for each metrics in buildMetrics
var keys = Object.keys(buildMetrics[0].metrics);

keys.forEach(function(key) {
  console.log('Build %s metric data', key);
  var data = metrics[key] || {};
  console.log('Existing data', data);

  var xaxis = data.xaxis || [];
  var series = data.series || [];

  // Adds a new xaxis with timestamp
  xaxis.push(Date.now());

  // And metrics for each URL
  buildMetrics.forEach(function(buildMetric) {
    var url = buildMetric.url;

    var serie = series.filter(function(serie) {
      return serie.name === url;
    })[0];

    if (!serie) {
      serie = {};
      series.push(serie);
    }

    var serieData = serie.data || [];
    var value = buildMetric.metrics[key];

    if (typeof value === 'undefined') return;

    // Push the new metric
    serieData.push(value);
    console.log('Pushing value %s for key %s in %s', value, key, serieData);

    serie.data = serieData;
    serie.name = url;
    console.log(serie);
  });


  data.xaxis = xaxis;
  data.series = series;
  results[key] = data;
});

// Writes metric down to ./metrics.json
console.log('Writing results to %s with', metricFile, results);
fs.writeFileSync(metricFile, JSON.stringify(results));

function requireWS(file) {
  return require(process.env.WORKSPACE ? path.join(process.env.WORKSPACE, 'node_modules', file) : file);
}</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.tap4j.plugin.TapPublisher plugin="tap@1.20">
      <testResults>*.tap</testResults>
      <failIfNoResults>false</failIfNoResults>
      <failedTestsMarkBuildAsFailure>false</failedTestsMarkBuildAsFailure>
      <outputTapToConsole>false</outputTapToConsole>
      <enableSubtests>false</enableSubtests>
      <discardOldReports>false</discardOldReports>
      <todoIsFailure>false</todoIsFailure>
      <includeCommentDiagnostics>false</includeCommentDiagnostics>
      <validateNumberOfTests>false</validateNumberOfTests>
      <planRequired>true</planRequired>
      <verbose>true</verbose>
    </org.tap4j.plugin.TapPublisher>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.25">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>UPSTREAM_BUILD_ID=$BUILD_ID
UPSTREAM_BUILD_NUMBER=$BUILD_NUMBER
UPSTREAM_BUILD_URL=$BUILD_URL
UPSTREAM_JOB_NAME=$JOB_NAME
UPSTREAM_DATA=$WORKSPACE/build.json
UPSTREAM_WORKSPACE=$WORKSPACE
MAIL_SUBJECT=Greenskin - Asserts failed for $JOB_NAME - $BUILD_URL</properties>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>mailer,mailer-daily,mailer-weekly</projects>
          <condition>ALWAYS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
  </publishers>
  <buildWrappers/>
</project>
