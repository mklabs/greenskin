<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Testing out phantomas metrics</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>20</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>PERF_URLS</name>
          <description>List of monitoring URLs. Whitespace separated.</description>
          <defaultValue>http://example.com http://example.com/2</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>JSON_CONFIG</name>
          <description>Phantomas JSON config.</description>
          <defaultValue>{&quot;no-externals&quot;:false,&quot;allow-domain&quot;:&quot;.kk-data.com&quot;,&quot;asserts&quot;:{}}</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>jenkins-slave</assignedNode>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>*/30 * * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>echo &quot;{}&quot; &gt; package.json
[ -e node_modules ] || npm install phantomas</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

URLS=&quot;$PERF_URLS&quot;

RESULT_DIR=&quot;results/$BUILD_NUMBER&quot;


echo &quot;&quot;&quot;

URLs: $URLS

&quot;&quot;&quot;

node -e "var s = '$JSON_CONFIG'; if (s[0] === '\"'  && s[s.length - 1] === '\"') { s = s.slice(1, -1); } require('fs').writeFileSync('./config.json', s);"

cat config.json

for url in $URLS; do

  # Define URL key for I/O and Metric keys
  URL_KEY=$(node -pe &quot;process.argv.slice(1)[0].replace(/(^https?:\/\/)|(\/$)/g, '').replace(/(\/|\?|-|&|=|\.)/g, '_')&quot; $url);
  URL_DIR=$RESULT_DIR/$URL_KEY

  echo &quot;&quot;&quot;

  URL - $url
  Key - $URL_KEY
  Dir - $URL_DIR

  &quot;&quot;&quot;

  mkdir -p $URL_DIR

  # echoing to user
  echo ./node_modules/.bin/phantomas $url \
    --reporter json \
    --modules=windowPerformance  \
    --config ./config.json \
    --screenshot $URL_DIR/screenshot.png \
    --har $URL_DIR/har.json \
    --film-strip --film-strip-dir $URL_DIR/filmstrip

  echo &quot;&quot;

  # actual run
  ./node_modules/.bin/phantomas $url \
    --reporter json \
    --modules=windowPerformance  \
    --config ./config.json \
    --screenshot $URL_DIR/screenshot.png \
    --har $URL_DIR/har.json \
    --film-strip --film-strip-dir $URL_DIR/filmstrip \
    &gt; $URL_DIR/build.json


  cat $URL_DIR/build.json
  echo &quot;&quot;

  cd $RESULT_DIR &amp;&amp; find -type f  &gt; files.txt
  cd $WORKSPACE
done

rm config.json

</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/env node

var env = process.env;

var fs = require(&apos;fs&apos;);
var path = require(&apos;path&apos;);
var exists = fs.existsSync;

var phantomas = requireWS(&apos;phantomas&apos;);
var phantomasResults = requireWS(&apos;phantomas/core/results&apos;);
var loadReporter = requireWS(&apos;phantomas/core/reporter&apos;);


var buildNumber = env.BUILD_NUMBER || env.TRAVIS_BUILD_NUMBER || &apos;last&apos;;
var dirname = path.resolve(env.WORKSPACE || &apos;&apos;, &apos;results&apos;, buildNumber);

console.log('Result dir:', dirname);
var results = fs.readdirSync(dirname).map(function(dir) {
  if (fs.statSync(path.join(dirname, dir)).isFile()) return;
  console.log(&apos;Dealing with results %s dir&apos;, dir);
  var data = {};

  try {
    data = require(path.join(dirname, dir, &apos;build.json&apos;));
  } catch(e) {
    console.error(&apos;Error loading build.json&apos;, dirname, dir);
    return;
  }


  data._asserts = data.asserts;
  data.asserts = data.asserts.rules;

  var results = phantomasResults(data);
  var reporter = loadReporter(results, {
    reporter: &apos;tap&apos;
  });

  // pass a function that reporter should call once done
  var res = reporter.render(function() {});

  // Both in result dir
  var filename = path.resolve(dirname, dir, &apos;build.tap&apos;);
  console.log(&apos;Writing TAP results to %s file&apos;, filename);

  // And root workspace for tap publish
  filename = path.resolve(env.WORKSPACE || &apos;&apos;, dir + &apos;.tap&apos;);
  console.log(&apos;Writing TAP results to %s file&apos;, filename);
  fs.writeFileSync(filename, res);

  // Used by statsd-send to build the metric key
  data.prefix = dir;

  return data;
});

// All build info, to pass along downstream jobs
var filename = path.resolve(env.WORKSPACE || &apos;&apos;, &apos;build.json&apos;);
console.log(&apos;Writing build JSON results to %s file&apos;, filename);
fs.writeFileSync(filename, JSON.stringify(results));


function requireWS(file) {
  return require(env.WORKSPACE ? path.join(env.WORKSPACE, &apos;node_modules&apos;, file) : file);
}</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.tap4j.plugin.TapPublisher plugin="tap@1.18">
      <testResults>*.tap</testResults>
      <failIfNoResults>false</failIfNoResults>
      <failedTestsMarkBuildAsFailure>false</failedTestsMarkBuildAsFailure>
      <outputTapToConsole>false</outputTapToConsole>
      <enableSubtests>false</enableSubtests>
      <discardOldReports>false</discardOldReports>
      <todoIsFailure>false</todoIsFailure>
      <includeCommentDiagnostics>false</includeCommentDiagnostics>
      <validateNumberOfTests>false</validateNumberOfTests>
      <planRequired>true</planRequired>
    </org.tap4j.plugin.TapPublisher>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.24">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>
UPSTREAM_BUILD_ID=$BUILD_ID
UPSTREAM_BUILD_NUMBER=$BUILD_NUMBER
UPSTREAM_BUILD_URL=$BUILD_URL
UPSTREAM_JOB_NAME=$JOB_NAME
UPSTREAM_DATA=$WORKSPACE/build.json
UPSTREAM_WORKSPACE=$WORKSPACE</properties>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>statsd_send, mailer</projects>
          <condition>ALWAYS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
  </publishers>
  <buildWrappers/>
</project>
