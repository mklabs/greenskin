
<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>PERF_URLS</name>
          <description>URL(s) under test. Space separated</description>
          <defaultValue>http://kelkoo.fr http://kelkoo.it</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>JSON_CONFIG</name>
          <description></description>
          <defaultValue>{&quot;median&quot;:{&quot;firstView&quot;:{&quot;requests&quot;:30,&quot;loadTime&quot;:2000,&quot;docTime&quot;:2500}}}</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>WPT_SERVER</name>
          <description>Remote webpagetest server (ex: http://webpagetest.org or http://wpt.foo-corp.net)</description>
          <defaultValue>http://dc1-se-prod-kkspeed-02.prod.dc1.kelkoo.net:8080/</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>jenkins-slave</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>*/30 * * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>echo &quot;{}&quot; &gt; package.json
[ -e node_modules ] || npm install webpagetest</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

URLS=&quot;$PERF_URLS&quot;

RESULT_DIR=&quot;results/$BUILD_NUMBER&quot;


echo &quot;&quot;&quot;

URLs: $URLS

&quot;&quot;&quot;

node -e &quot;var s = &apos;$JSON_CONFIG&apos;; if (s[0] === &apos;\&quot;&apos; &amp;&amp; s[s.length - 1] === &apos;\&quot;&apos;) { s = s.slice(1, -1); } require(&apos;fs&apos;).writeFileSync(&apos;./config.json&apos;, s);&quot;

cat config.json

for url in $URLS; do

  # Define URL key for I/O and Metric keys
  URL_KEY=$(node -pe &quot;process.argv.slice(1)[0].replace(/(^https?:\/\/)|(\/$)/g, &apos;&apos;).replace(/(\/|\?|-|&amp;|=|\.)/g, &apos;_&apos;)&quot; $url);
  URL_DIR=$RESULT_DIR/$URL_KEY

  echo &quot;&quot;&quot;

  URL - $url
  Key - $URL_KEY
  Dir - $URL_DIR

  &quot;&quot;&quot;

  mkdir -p $URL_DIR

  # echoing to user
  echo ./node_modules/.bin/webpagetest test $url --server $WPT_SERVER --first --location Chrome --poll 3

  echo &quot;&quot;

  # actual run
  ./node_modules/.bin/webpagetest test $url --server $WPT_SERVER --first --location Chrome --poll 3 &gt; $URL_DIR/build.json

  cat $URL_DIR/build.json
  echo &quot;&quot;

  cd $WORKSPACE
done</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/usr/bin/env node

// Scripts that goes through results dir, and aggregates for a BUILD_NUMBER, the build.json file per URL in build.json at the root of the workspace

var fs = require(&apos;fs&apos;);
var path = require(&apos;path&apos;);


var dirname = path.join(process.env.WORKSPACE, &apos;results&apos;, process.env.BUILD_NUMBER);

console.log(&apos;Processing results in dir&apos;, dirname);

var results = fs.readdirSync(dirname).map(function(dir) {
  if (fs.statSync(path.join(dirname, dir)).isFile()) return;
  console.log(&apos;Dealing with results %s dir&apos;, dir);
  var data = {};

  try {
    data = require(path.join(dirname, dir, &apos;build.json&apos;));
  } catch(e) {
    console.error(&apos;Error loading build.json&apos;, dirname, dir);
    return;
  }

  data.generator = &apos;webpagetest-api&apos;;
  data.url = dir;

  // When this build was generated
  data.timestamp = Date.now();
  fs.writeFileSync(path.join(dirname, dir, &apos;build.json&apos;), JSON.stringify(data));

  // Used by statsd-send to build the metric key
  data.prefix = dir;

  return data;
});

fs.writeFileSync(&apos;build.json&apos;, JSON.stringify(results));
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/usr/bin/env node

// Script to generate metrics.json file for highcharts views

var fs    = require(&apos;fs&apos;);
var path  = require(&apos;path&apos;);
var path  = require(&apos;path&apos;);


var read = fs.readFileSync;
var exists = fs.existsSync;

var args = process.argv.slice(2);
var metricFile = args[0] || &apos;metrics.json&apos;;

if (!exists(&apos;./build.json&apos;)) throw new Error(&apos;Missing build.json file. Please, run phantomas-format before&apos;);

var buildMetrics = require(path.resolve(&apos;./build.json&apos;)).filter(function(metrics) {
  // Filters out null data
  return metrics;
});

var metrics = exists(metricFile) ? require(path.resolve(metricFile)) : {};

var results = {};

// Build xaxis &amp; series for each metrics in buildMetrics
var median = buildMetrics[0].response.data.median.firstView;
var keys = Object.keys(median);

keys.forEach(function(key) {
  console.log(&apos;Build %s metric data&apos;, key);
  var data = metrics[key] || {};

  if (isNaN(median[key])) return console.log(&apos;Key&apos;, key, &apos;is not a number:&apos;, median[key]);

  var xaxis = data.xaxis || [];
  var series = data.series || [];

  // Adds a new xaxis with timestamp
  xaxis.push(Date.now());

  // And metrics for each URL
  buildMetrics.forEach(function(buildMetric) {

    var url = buildMetric.url;

    var serie = series.filter(function(serie) {
      return serie.name === url;
    })[0];

    if (!serie) {
      serie = {};
      series.push(serie);
    }

    var serieData = serie.data || [];
    var value = buildMetric.response.data.median.firstView[key];

    if (typeof value === &apos;undefined&apos;) return;

    // Push the new metric
    serieData.push(value);

    serie.data = serieData;
    serie.name = url;
  });


  data.xaxis = xaxis;
  data.series = series;
  results[key] = data;
});

// Writes metric down to ./metrics.json
console.log(&apos;Writing results to %s with&apos;, metricFile);
fs.writeFileSync(metricFile, JSON.stringify(results));

function requireWS(file) {
  return require(process.env.WORKSPACE ? path.join(process.env.WORKSPACE, &apos;node_modules&apos;, file) : file);
}</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/usr/bin/env node

// Scripts that prepares build.json file data for mailing, putting keys like metrics / asserts like Phantomas jobs do

var fs = require(&apos;fs&apos;);
var path = require(&apos;path&apos;);

// Aggregated data passed to downstream job
var buildData = require(path.resolve(&apos;./build.json&apos;));

// Specs file defining asserts
var asserts = require(path.resolve(&apos;./config.json&apos;))

console.log(&apos;\n\nPreparing Email data\n\n&apos;);

buildData = buildData.map(function(data) {
  var metrics = data.response.data.median.firstView;

  console.log(&apos;Metrics data for&apos;, data.url, metrics);

  data.metrics = metrics;
  data.asserts = asserts.median.firstView;

  data._asserts = {};
  data._asserts.rules = data.asserts;

  var failedAsserts = Object.keys(metrics).map(function(key) {
    var metric = metrics[key];
    var assert = data.asserts[key];
    if (!assert) return;

    // If metric is higher than assert, consider as failure
    if (metric &gt; assert) return key;
  }).filter(function(metric) {
    return metric;
  });

  data._asserts.failedAsserts = failedAsserts;
  data._asserts.failedCount = failedAsserts.length;

  return data;
});

console.log(&apos;Writing data to build.json&apos;);
console.log(buildData);

fs.writeFileSync(&apos;./build.json&apos;, JSON.stringify(buildData));</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

# Script that goes through resuls dir for this BUILD_NUMBER, taking build.json to get back test ID and asking webpagetest-api to test against config.json

rm *.tap

dir=&quot;results/$BUILD_NUMBER&quot;

for file in `ls $dir`; do
  echo &quot;\n\n&quot;
  echo &quot;Figure out test id for $dir/$file/build.json&quot;

  id=$(node -pe &quot;require(&apos;./$dir/$file/build.json&apos;).response.data.testId&quot;)
  echo &quot;test id: $id&quot;

  echo &quot;Testing results against config.json&quot;
  status=$(./node_modules/.bin/webpagetest results $id --server $WPT_SERVER --specs ./config.json --reporter tap &gt; $file.tap)
  status=$(./node_modules/.bin/webpagetest results $id --server $WPT_SERVER --specs ./config.json --reporter tap &gt; $dir/$file/results.tap)

done</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.tap4j.plugin.TapPublisher plugin="tap@1.20">
      <testResults>*.tap</testResults>
      <failIfNoResults>false</failIfNoResults>
      <failedTestsMarkBuildAsFailure>false</failedTestsMarkBuildAsFailure>
      <outputTapToConsole>false</outputTapToConsole>
      <enableSubtests>false</enableSubtests>
      <discardOldReports>false</discardOldReports>
      <todoIsFailure>false</todoIsFailure>
      <includeCommentDiagnostics>false</includeCommentDiagnostics>
      <validateNumberOfTests>false</validateNumberOfTests>
      <planRequired>true</planRequired>
      <verbose>true</verbose>
    </org.tap4j.plugin.TapPublisher>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.25">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>UPSTREAM_BUILD_ID=$BUILD_ID
UPSTREAM_BUILD_NUMBER=$BUILD_NUMBER
UPSTREAM_BUILD_URL=$BUILD_URL
UPSTREAM_JOB_NAME=$JOB_NAME
UPSTREAM_DATA=$WORKSPACE/build.json
UPSTREAM_WORKSPACE=$WORKSPACE
MAIL_SUBJECT=Greenskin - Asserts failed for $JOB_NAME - $BUILD_URL</properties>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>mailer, </projects>
          <condition>ALWAYS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
  </publishers>
  <buildWrappers/>
</project>
