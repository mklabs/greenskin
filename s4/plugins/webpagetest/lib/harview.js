var debug   = require('debug')('gs:phantomas:harview');

var async   = require('async');
var request = require('request');
var util    = require('util');
var events  = require('events');

module.exports = HarPage;

// This page handles the files.txt index file generated by Phantomas Job
// on Jenkins, per results build directory (ex. results/2/files.txt)
//
// Will build up page info from this list of files, dealing with proper
// URL matching etc.
function HarPage(config, data) {
  this.config = config || {};
  this.data = data || {};
  this.results = {};

  if (!(config.jenkinsUI)) throw new Error('Missing Jenkins UI config');
  if (!(data.job && data.job.name)) throw new Error('Data not proper structure, job not defined');

  this.workspace = config.jenkinsUI + [
    '/job',
    data.job.name,
    'ws/results'
  ].join('/').replace(/\/\/+/, '/');
}

util.inherits(HarPage, events.EventEmitter);

// Page helper for har view
HarPage.prototype.build = function build(done) {
  var data = this.data;

  // console.log(data.build.color, data.build);
  // if (data.build.color !== 'blue') return done(null, data);

  var results = this.results;

  var fileindex = this.workspace + '/' + data.number + '/files.txt';

  // Catch the first error, and errback to our server
  this.once('error', done);

  debug('Request zip file', fileindex);
  // request(fileindex, this.handleResponse.bind(this));
  var self = this;
  request(fileindex, function(err, response, body) {
    if (err) return done(err);
    if (response.statusCode !== 200) return done(null, data);

    var files = body.split(/\r?\n/);
    debug('Files', files);

    files.forEach(self.buildResults, self);

    var urls = Object.keys(results).map(self.buildData, self);
    data.job._urls = urls;
    done(null, data);
  });
};

HarPage.prototype.buildResults = function buildResults(filename) {
  filename = filename.replace(/^\.\//, '');
  if (!filename) return;
  var parts = filename.match(/^([^\/]+)\/(.+)/) || [];
  var url = parts[1] || '';
  var file = parts[2] || '';
  if (!(url && file)) {
    debug('File: Cannot extract URL & file from entry: ', filename);
    return;
  }

  var data = this.results[url] = this.results[url] || {};

  debug('File:', url, file);
  if (file === 'build.json') {
    data.build = file;
  } else if (file === 'har.json') {
    data.har = file;
  } else if (/^filmstrip/.test(file)) {
    data.screenshots = (data.screenshots || []);
    data.screenshots.push(file);
  } else if (file === 'screenshot.png') {
    data.screenshot = file;
  }
};

HarPage.prototype.buildData = function buildData(key) {
  var url = encodeURI(key);
  var workspace = this.workspace;
  var data = this.data;

  var urlData = {
    id: url,
    url: [workspace, data.number, key].join('/'),
    jenkinsHar: [workspace, data.number, url, 'har.json'].join('/'),
    localHar: '/phantomas/har/' + data.job.name + '/' + data.number + '/' + url + '.json',
    jenkinsFilmstripDir: [workspace, data.number, url, 'filmstrip'].join('/')
  };

  if (!this.results[key]) return urlData;
  if (!this.results[key].screenshots) return urlData;

  urlData.screenshots = this.results[key].screenshots.map(function(entry) {
    return {
      url: workspace + '/' + data.number + '/' + url + '/' + entry,
      thumbnail: '/phantomas/thumbnail/' + data.job.name + '/' + data.number + '/' + url + '/' + entry,
      time: this.extractTime(entry)
    };
  }, this).sort(function(a, b) {
    debug('Sort time', typeof a.time, typeof b.time);
    if (a.time === b.time) return 0;
    return a.time < b.time ? -1 : 1;
  });

  return urlData;

};

HarPage.prototype.extractTime = function extractTime(obj) {
  var value = obj.split('-').slice(-1)[0].replace('.png', '');
  return parseInt(value, 10);
};
