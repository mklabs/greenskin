<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>JOB_NAME</name>
          <description></description>
          <defaultValue>kelkoo.fr</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BASE_DIR</name>
          <description></description>
          <defaultValue>/home/vagrant/workspace/</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>NUMBER_OF_BUILDS</name>
          <description></description>
          <defaultValue>20</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>jenkins-slave</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>echo &quot;{}&quot; &gt; package.json
[ -e node_modules ] || npm install rimraf</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/usr/bin/env node

var fs = require(&apos;fs&apos;);
var path = require(&apos;path&apos;);
var rimraf = requireWS(&apos;rimraf&apos;);
var exists = fs.existsSync;

var dir = path.join(process.env.BASE_DIR, process.env.JOB_NAME);
var numberOfBuilds = parseInt(process.env.NUMBER_OF_BUILDS, 10);


console.log(&apos;Cleaning up workspace:&apos;, dir);

if (!exists(dir)) throw new Error(&apos;Cannot load dir:&apos; + dir);
if (!exists(path.join(dir, &apos;results&apos;))) throw new Error(&apos;Cannot load dir:&apos; + path.join(dir, &apos;results&apos;));

var files = fs.readdirSync(path.join(dir, &apos;results&apos;));
var max = Math.max.apply(null, files);
var min = max - numberOfBuilds;

console.log(&apos;max&apos;, max);
console.log(&apos;min&apos;, min);

files.forEach(function(file) {
  file = parseInt(file, 10);
  if (isNaN(file)) return;


  if (file &lt; min) {
    console.log(&apos;Results dir %s is older than %s. Removing.&apos;, file, min);
    rimraf.sync(path.join(dir, &apos;results&apos;, file + &apos;&apos;));
    return;
  }

});


function requireWS(file) {
  var env = process.env;
  return require(env.WORKSPACE ? path.join(env.WORKSPACE, &apos;node_modules&apos;, file) : file);
}</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/usr/bin/env node

var fs = require(&apos;fs&apos;);
var path = require(&apos;path&apos;);

var dir = path.join(process.env.BASE_DIR, process.env.JOB_NAME);
var numberOfBuilds = parseInt(process.env.NUMBER_OF_BUILDS, 10);

var metrics = require(path.join(dir, &apos;./metrics.json&apos;));

Object.keys(metrics).forEach(function(key) {
  console.log(&apos;Reducing metrics for&apos;, key);

  var metric = metrics[key];

  // Xaxis, only keep the last numberOfBuilds item
  var ln = metric.xaxis.length;
  var xaxis = metric.xaxis.filter(function(xaxis, i, arr) {
    return i + numberOfBuilds &gt;= ln;
  });

  metric.xaxis = xaxis;

  // Series, only keep the last numberOfBuilds item
  metric.series.forEach(function(serie, i) {
     var ln = serie.data.length;
     serie.data = serie.data.filter(function(data, i, arr) {
       return i + numberOfBuilds &gt;= ln;
     });
  });

});

fs.writeFileSync(path.join(dir, &apos;./metrics.json&apos;), JSON.stringify(metrics));</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>
