<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Send alerts based on Upstream job results.</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>3</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>UPSTREAM_JOB_NAME</name>
          <description>Used to add the original Job name to the build.json file</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>UPSTREAM_DATA</name>
          <description>Used to copy build.json over to this workspace</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TIMESTAMP_DELTA</name>
          <description>The number of milliseconds for which files are processed. Any build data with a timestamp older than delta are removed from workspace.

Here 604800000 means 7d: 1000 * 60 * 60 * 24 * 7</description>
          <defaultValue>604800000</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>JOB_MAILS</name>
          <description>List of destination emails for the report, space separated.</description>
          <defaultValue>mickael.daniel@kelkoo.fr daniel.mickael@gmail.com</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MAIL_USER</name>
          <description></description>
          <defaultValue>root@dc1-se-prod-perf-01.prod.dc1.kelkoo.net</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MAIL_PASSWORD</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MAIL_SUBJECT</name>
          <description></description>
          <defaultValue>Daily report</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TEMPLATE_URL</name>
          <description>Full Git clone URL for the template, or a gist id.</description>
          <defaultValue>e6f74077532009041bfc</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MAIL_HOST</name>
          <description></description>
          <defaultValue>smtp.dc1.kelkoo.net</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DEBUG</name>
          <description>DEBUG lvl option for logging</description>
          <defaultValue>gs*</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>jenkins-slave</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 9 * * 0</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>[ -e package.json ] || echo &quot;{}&quot; &gt; package.json
[ -e node_modules ] || npm install gistmailer email-templates handlebars node-sass mkdirp -save</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/env node

var fs = require(&apos;fs&apos;);
var path = require(&apos;path&apos;);
var mkdirp = requireWS(&apos;mkdirp&apos;);

// Copy file if it comes from downstream
if (process.env.UPSTREAM_DATA) {
  fs.writeFileSync(process.env.BUILD_NUMBER + &apos;.json&apos;, fs.readFileSync(process.env.UPSTREAM_DATA, &apos;utf8&apos;));

  var data = require(path.join(process.env.WORKSPACE, process.env.BUILD_NUMBER + &apos;.json&apos;));
  data = data.filter(function(build) {
    if (!build) return false;
    build.jobName = process.env.UPSTREAM_JOB_NAME;
    return true;
  });

  fs.writeFileSync(process.env.BUILD_NUMBER + &apos;.json&apos;, JSON.stringify(data));
  return;
}

// Current timestamp
var now = Date.now();

// Process files otherwise
var files = fs.readdirSync(process.env.WORKSPACE).filter(function(file) {
  return path.extname(file) === &apos;.json&apos; &amp;&amp; file !== &apos;package.json&apos;;
}).map(function(file) {
  var data = {};
  data.data = require(path.join(process.env.WORKSPACE, file));
  data.file = file;
  return data;
});

// Cleanup files older than TIMESTAMP_DELTA
files = files.filter(function(data) {
  data.data = data.data.filter(function(data) { return data; });

  var timestamp = data.data[0].timestamp;
  var delta = now - timestamp;
  var timestampDelta = parseInt(process.env.TIMESTAMP_DELTA, 10);

  if (delta &gt; timestampDelta) {
    console.log(&apos;File&apos;, data.file, &apos;is older than timestamp delta. Removing&apos;);
    fs.unlinkSync(data.file);
    return false;
  }

  return true;
});

console.log(&apos;Processing %s files&apos;, files.length);

// Build assert data for the email
var assertsData = {};
files.forEach(function(data) {
  console.log(&apos;Building assert data for&apos;, data.file);

  var metrics = 0;
  var metricsFailed = 0;
  var availability = 0;
  var perfAvg = 0;
  var jobName = &apos;&apos;;

  data.data.forEach(function(data) {
    var asserts = data._asserts;
    var nbMetrics = Object.keys(data.metrics).length;
    var nbFailedAsserts = asserts.failedCount;
    var failedAsserts = asserts.failedAsserts;

    // Increment the total number of metrics for this job
    metrics = metrics + nbMetrics;

    // Increment the total number of failed asserts for this job
    metricsFailed = metricsFailed + nbFailedAsserts;

    // job name
    jobName = data.jobName;

    // perf avg
    perfAvg = perfAvg + data.metrics.domComplete;
    console.log(&apos;per data perf&apos;, perfAvg);
  });

  // perf avg
  perfAvg = perfAvg / data.data.length;
  console.log(&apos;per job perf&apos;, perfAvg);

  var assertData = assertsData[jobName] || {};

  assertData.numberOfMetrics = assertData.numberOfMetrics || 0;
  assertData.numberOfFailedAsserts = assertData.numberOfFailedAsserts || 0;
  assertData.perfAvg = assertData.perfAvg || 0;

  assertsData[jobName] = {
    name: jobName,
    numberOfMetrics: assertData.numberOfMetrics + metrics,
    numberOfFailedAsserts: assertData.numberOfFailedAsserts + metricsFailed,
    perfAvg: (assertData.perfAvg + perfAvg) / 2,
  };

  assertData = assertsData[jobName];
  // Compute availability (ratio between metrics and failed asserts)
  availability = 100 - ((assertData.numberOfFailedAsserts * 100) / assertData.numberOfMetrics);

  assertsData[jobName].availability = availability;
});

assertsData = Object.keys(assertsData).map(function(jobName) {
  return assertsData[jobName];
});

console.log(assertsData);

mkdirp.sync(&apos;assertsData&apos;);
fs.writeFileSync(&apos;assertsData/asserts.json&apos;, JSON.stringify(assertsData));

function requireWS(file) {
  return require(process.env.WORKSPACE ? path.join(process.env.WORKSPACE, &apos;node_modules&apos;, file) : file);
}</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/env node


// Copy file if it comes from downstream
if (process.env.UPSTREAM_DATA) return;


var fs = require(&apos;fs&apos;);
var path = require(&apos;path&apos;);
var exists = fs.existsSync;

var env = process.env;

var Mailer  = requireWS(&apos;gistmailer&apos;);



var program = {};

// Env


if (env.TEMPLATE_URL) program.url = env.TEMPLATE_URL;
if (env.MAIL_USER) program.user = env.MAIL_USER;
if (env.MAIL_PASSWORD) program.pass = env.MAIL_PASSWORD;
if (env.MAIL_SERVICE) program.service = env.MAIL_SERVICE;
if (env.MAIL_HOST) program.host = env.MAIL_HOST;
if (env.MAIL_PORT) program.port = env.MAIL_PORT;
if (env.MAIL_FROM) program.from = env.MAIL_FROM;
if (env.MAIL_SUBJECT) program.subject = env.MAIL_SUBJECT;

if (env.JOB_MAILS) var mails = env.JOB_MAILS.split(&apos; &apos;);

// Init
(function run(mail) {
  if (!mail) return;
  console.log(&apos;Sending email to&apos;, mail);

  var mailer = new Mailer();

  if (program.user &amp;&amp; program.pass) mailer.auth({
    user: program.user,
    pass: program.pass
  });

  mailer.service(program.service);
  mailer.host(program.host);
  mailer.port(program.port);
  mailer.url(program.url);
  mailer.to(mail);
  mailer.url(program.url);
  mailer.subject(program.subject);

  // Context data for https://gist.github.com/mklabs/eb28e58ac28a8d3ab845/
  var data = require(path.join(process.env.WORKSPACE, &apos;assertsData/asserts.json&apos;));


  console.log(&apos;context&apos;, data);

  mailer.data({
    title: &apos;Greenskin Daily report&apos;,
    asserts: data
  });

  // Run

  mailer.run(function(err) {
    if (err) {
      console.error(&apos;Error running mailer&apos;, err);
      return process.exit(1);
    }

    run(mails.shift());
  });

})(mails.shift());


function requireWS(file) {
  return require(process.env.WORKSPACE ? path.join(process.env.WORKSPACE, &apos;node_modules&apos;, file) : file);
}
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>
